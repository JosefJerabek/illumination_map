from numpy import array, linspace, arange, meshgrid, empty, transpose, min, max, mean, median
import matplotlib.pyplot as pl
import yaml
import sys
from typing import Optional, Tuple

from lamp_area import LampArea, LampPlacement, Point3D
from dataclasses import dataclass
from typing import List, Optional


@dataclass
class CenteredRectangle:
    radius_x: float
    radius_y: float


@dataclass
class Config:
    lamp_ldt_path: str
    lamp_placements: List[LampPlacement]
    x_axis: array
    y_axis: array
    # illumination same color axis
    illum_axis: array
    box: CenteredRectangle


def initialze_from_yaml(config_path) -> Config:

    print(f"Loading configuration from \"{config_path}\"")
    config = yaml.load(open(config_path), Loader=yaml.SafeLoader)

    lamp_placements = [
        LampPlacement(Point3D(item["x"], item["y"], item["z"]), item["azimut"], item["elevation"]) 
        for item in config["lamp_placements"]
        ]

    lamp_ldt_path = config["ldt_path"]

    axis = config["x_axis"] 
    x_axis = linspace(axis["start"], axis["stop"], axis["count"])

    axis = config["y_axis"] 
    y_axis = linspace(axis["start"], axis["stop"], axis["count"])
    
    axis = config["illumination_axis"] 
    illum_axis = linspace(axis["start"], axis["stop"], axis["count"])

    box = CenteredRectangle(
        radius_x=config["box_x_radius"],
        radius_y=config["box_y_radius"]
    )

    return Config(
        lamp_ldt_path=lamp_ldt_path,
        lamp_placements=lamp_placements,
        x_axis=x_axis,
        y_axis=y_axis,
        illum_axis=illum_axis,
        box=box
    )


def plot_illuminance(config: Config) -> None:
    
    x_grid, y_grid = meshgrid(config.x_axis, config.y_axis) 
    illuminancies = empty((len(config.x_axis), len(config.y_axis)))
    
    lamp_area = LampArea(config.lamp_ldt_path, config.lamp_placements)

    for x_index, x in enumerate(config.x_axis):
        for y_index, y in enumerate(config.y_axis):
            illuminance = lamp_area.illuminance(x, y)
            illuminancies[x_index, y_index] = illuminance / 2.0 # TODO - why?

    pl.contourf(
        transpose(x_grid), 
        transpose(y_grid), 
        illuminancies, 
        config.illum_axis,
        cmap=pl.cm.get_cmap("jet")
    )

    def get_param_string(illuminancies: array) -> str:
        min_value = int(min(illuminancies))
        max_value = int(max(illuminancies))
        mean_value = int(mean(illuminancies))
        median_value = int(median(illuminancies))
        return f"min={min_value} max={max_value} mean={mean_value} median={median_value}"

    pl.colorbar()
    pl.title(f"Illuminance [lux] ({get_param_string(illuminancies)})")
    pl.xlabel("x [m]")
    pl.ylabel("y [m]")


def plot_box(box: CenteredRectangle):
    rx = box.radius_x
    ry = box.radius_y
    xx = [-rx, -rx, rx, rx, -rx]
    yy = [-ry, ry, ry, -ry, -ry]
    pl.plot(xx, yy, "k")


def print_help():
    print(f"{__file__} [configuration_file]")
    print(f"\tComputes ground light illumination map generated by light source placed in space.")
    print(f"\tconfiguration_file ... lamp and space configuration [default=\"config.yaml\"]")


if len(sys.argv) == 0 or len(sys.argv) > 1:
    if sys.argv[1] == "-h" or sys.argv[1] == "--help":
        print_help()
        exit()
    else:
        config_path = sys.argv[1]  

config = initialze_from_yaml(config_path)
plot_illuminance(config)
plot_box(config.box)
pl.show()
